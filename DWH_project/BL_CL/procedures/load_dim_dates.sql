CREATE OR REPLACE PROCEDURE BL_cl.LOAD_DIM_DATES()
LANGUAGE plpgsql
AS $$
DECLARE
    rows_inserted INT := 0;
BEGIN
    WITH DATE_RANGES AS (  SELECT DT::DATE AS FULL_DATE
        FROM GENERATE_SERIES('2022-01-01'::DATE, '2027-02-01'::DATE, INTERVAL '1 DAY') AS DT
    )
    INSERT INTO BL_DM.DIM_DATES (
        "DATE_ID",
        "DAY_OF_WEEK",
        "DAY_OF_MONTH",
        "WEEK_ID",
        "MONTH_ID",
        "MONTH_DESC",
        "QUARTER_ID",
        "QUARTER_DESC",
        "YEAR_ID",
        "IS_WEEKEND")
    SELECT 
        TO_CHAR(D.FULL_DATE,'YYYYMMDD')::BIGINT AS "DATE_ID",
        TRIM(TO_CHAR(D.FULL_DATE,'DAY')) AS "DAY_OF_WEEK",
        EXTRACT(DAY FROM D.FULL_DATE)::INT AS "DAY_OF_MONTH",
        (EXTRACT(YEAR FROM D.FULL_DATE)::INT * 100 + EXTRACT(WEEK FROM D.FULL_DATE)::INT)::BIGINT AS "WEEK_ID",
        (EXTRACT(YEAR FROM D.FULL_DATE)::INT * 100 + EXTRACT(MONTH FROM D.FULL_DATE)::INT)::BIGINT AS "MONTH_ID",
        TRIM(TO_CHAR(D.FULL_DATE,'MONTH')) AS "MONTH_DESC",
        EXTRACT(QUARTER FROM D.FULL_DATE)::INT AS "QUARTER_ID",
        'Q' || EXTRACT(QUARTER FROM D.FULL_DATE)::TEXT AS "QUARTER_DESC",
        EXTRACT(YEAR FROM D.FULL_DATE)::BIGINT AS "YEAR_ID",
        CASE WHEN EXTRACT(DOW FROM D.FULL_DATE) IN (0,6) THEN TRUE ELSE FALSE END AS "IS_WEEKEND"
    FROM DATE_RANGES D
    WHERE NOT EXISTS (  SELECT 1 FROM BL_DM.DIM_DATES dd WHERE dd."DATE_ID" = TO_CHAR(D.FULL_DATE,'YYYYMMDD')::BIGINT )
    ORDER BY "DATE_ID";

    GET DIAGNOSTICS rows_inserted = ROW_COUNT;

    CALL BL_CL.LOG_ETL_DM('LOAD_DIM_DATES', rows_inserted, 'SUCCESS');

EXCEPTION WHEN OTHERS THEN  CALL BL_CL.LOG_ETL_DM('LOAD_DIM_DATES', 0, 'ERROR: ' || SQLERRM);
    RAISE;
END;
$$;
