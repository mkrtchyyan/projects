CREATE OR REPLACE PROCEDURE BL_CL.LOAD_CE_PRODUCT_GROUPS()
LANGUAGE PLPGSQL
AS
$$
DECLARE
    ROWS_INSERTED INTEGER := 0;
BEGIN
    INSERT INTO BL_3NF.CE_PRODUCT_GROUPS (
        "PRODUCT_GROUP_ID",
        "PRODUCT_GROUP_SRC_ID",
        "PRODUCT_GROUP_DESC",
        "TA_INSERT_DT",
        "SOURCE_SYSTEM",
        "SOURCE_ENTITY" )
    SELECT 
        NEXTVAL('BL_3NF.CE_PRODUCT_GROUPS_SEQ'),
        PG."PRODUCT_GROUP",
        PG."PRODUCT_GROUP",
        CURRENT_TIMESTAMP,
        PG."SOURCE_SYSTEM",
        PG."SOURCE_ENTITY"
    FROM ( 
        SELECT DISTINCT
            "PRODUCT_GROUP",
            'SA_ONLINE_SALES' AS "SOURCE_SYSTEM",
            'SRC_ONLINE_COFFEE_SHOP_TRANSACTIONS' AS "SOURCE_ENTITY"
        FROM SA_ONLINE_SALES.SRC_ONLINE_COFFEE_SHOP_TRANSACTIONS
        UNION ALL
        SELECT DISTINCT
            "PRODUCT_GROUP",
            'SA_OFFLINE_SALES' AS "SOURCE_SYSTEM",
            'SRC_OFFLINE_COFFEE_SHOP_TRANSACTIONS' AS "SOURCE_ENTITY"
        FROM SA_OFFLINE_SALES.SRC_OFFLINE_COFFEE_SHOP_TRANSACTIONS
    ) PG
    ON CONFLICT("PRODUCT_GROUP_SRC_ID", "SOURCE_ENTITY", "SOURCE_SYSTEM") 
    DO NOTHING;
    GET DIAGNOSTICS ROWS_INSERTED = ROW_COUNT;
      CALL BL_CL.LOG_ETL('LOAD_CE_PRODUCT_GROUPS', ROWS_INSERTED, 'SUCCESS');
EXCEPTION  WHEN OTHERS THEN
            CALL BL_CL.LOG_ETL('LOAD_CE_PRODUCT_GROUP', 0, 'ERROR: ' || SQLERRM);
END;
$$;
