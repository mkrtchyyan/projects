CREATE OR REPLACE PROCEDURE BL_CL.LOAD_CE_PRODUCT_CATEGORIES()
LANGUAGE PLPGSQL
AS 
$$
DECLARE
    ROWS_INSERTED INTEGER := 0;
BEGIN
	INSERT INTO BL_3NF.CE_PRODUCT_CATEGORIES (
    "PRODUCT_CATEGORY_ID",
    "PRODUCT_CATEGORY_SRC_ID",
    "PRODUCT_GROUP_ID",
    "PRODUCT_CATEGORY_DESC",
    "TA_INSERT_DT",
    "SOURCE_SYSTEM",
    "SOURCE_ENTITY")
SELECT DISTINCT
    NEXTVAL('BL_3NF.CE_PRODUCT_CATEGORIES_SEQ'),
    PC."PRODUCT_CATEGORY" || ' | ' || PC."PRODUCT_GROUP",
    COALESCE(PG."PRODUCT_GROUP_ID", -1),
    PC."PRODUCT_CATEGORY",
    CURRENT_TIMESTAMP,
    PC."SOURCE_SYSTEM",
    PC."SOURCE_ENTITY"
FROM (
    SELECT DISTINCT
        "PRODUCT_CATEGORY" AS "PRODUCT_CATEGORY",
        "PRODUCT_GROUP" AS "PRODUCT_GROUP",
        'SA_ONLINE_SALES' AS "SOURCE_SYSTEM",
        'SRC_ONLINE_COFFEE_SHOP_TRANSACTIONS' AS "SOURCE_ENTITY"
    FROM SA_ONLINE_SALES.SRC_ONLINE_COFFEE_SHOP_TRANSACTIONS
    UNION ALL
    SELECT DISTINCT
        "PRODUCT_CATEGORY" AS "PRODUCT_CATEGORY",
       "PRODUCT_GROUP" AS "PRODUCT_GROUP",
        'SA_OFFLINE_SALES' AS "SOURCE_SYSTEM",
        'SRC_OFFLINE_COFFEE_SHOP_TRANSACTIONS' AS "SOURCE_ENTITY"
    FROM SA_OFFLINE_SALES.SRC_OFFLINE_COFFEE_SHOP_TRANSACTIONS) PC
LEFT JOIN BL_3NF.CE_PRODUCT_GROUPS PG 
ON PG."PRODUCT_GROUP_SRC_ID" = PC."PRODUCT_GROUP" AND PG."SOURCE_SYSTEM"=PC."SOURCE_SYSTEM" AND PG."SOURCE_ENTITY"=PC."SOURCE_ENTITY"
ON CONFLICT ("PRODUCT_CATEGORY_SRC_ID","SOURCE_SYSTEM","SOURCE_ENTITY") DO 
NOTHING;
GET DIAGNOSTICS ROWS_INSERTED = ROW_COUNT;
CALL BL_CL.LOG_ETL('LOAD_CE_PRODUCT_CATEGORIES', ROWS_INSERTED, 'SUCCESS');
EXCEPTION  WHEN OTHERS THEN
 CALL BL_CL.LOG_ETL('LOAD_CE_PRODUCT_CATEGORIES', 0, 'ERROR: ' || SQLERRM);
END;
$$;
