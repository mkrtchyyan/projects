CREATE OR REPLACE PROCEDURE BL_CL.LOAD_CE_STAFF_JOBS()
LANGUAGE PLPGSQL
AS $$
DECLARE ROWS_INSERTED INTEGER :=0;
BEGIN
	INSERT INTO BL_3NF.CE_STAFF_JOBS (
    "STAFF_JOB_ID",
    "STAFF_JOB_SRC_ID",
    "STAFF_ID",
    "JOB_ID",
    "TA_INSERT_DT",
    "SOURCE_SYSTEM",
    "SOURCE_ENTITY"
)
SELECT 
    NEXTVAL('BL_3NF.CE_STAFF_JOBS_SEQ'),
    SJ."STAFF_ID" || ' | ' || SJ."JOB_DESC",
    COALESCE(S."STAFF_ID", -1),
    COALESCE(J."JOB_ID", -1),
    CURRENT_TIMESTAMP,
    'SA_OFFLINE_SALES',
    'SRC_OFFLINE_COFFEE_SHOP_TRANSACTIONS'
FROM (
    SELECT DISTINCT 
      "STAFF_ID",
      "STAFF_JOB_DESC" AS "JOB_DESC"
    FROM SA_OFFLINE_SALES.SRC_OFFLINE_COFFEE_SHOP_TRANSACTIONS
) SJ
LEFT JOIN BL_3NF.CE_STAFF S ON S."STAFF_SRC_ID" = SJ."STAFF_ID"
LEFT JOIN BL_3NF.CE_JOBS J ON J."JOB_SRC_ID" = SJ."JOB_DESC"
ON CONFLICT ("STAFF_JOB_SRC_ID","SOURCE_SYSTEM","SOURCE_ENTITY") DO nothing;
GET DIAGNOSTICS ROWS_INSERTED = ROW_COUNT;
      CALL BL_CL.LOG_ETL('LOAD_CE_STAFF_JOBS', ROWS_INSERTED, 'SUCCESS');
EXCEPTION  WHEN OTHERS THEN
       CALL BL_CL.LOG_ETL('LOAD_CE_STAFF_JOBS', 0, 'ERROR: ' || SQLERRM);
END;
$$;
