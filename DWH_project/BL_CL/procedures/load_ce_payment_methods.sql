CREATE OR REPLACE PROCEDURE BL_CL.LOAD_CE_PAYMENT_METHODS()
LANGUAGE PLPGSQL
AS $$
DECLARE ROWS_INSERTED INTEGER =0;
BEGIN
	INSERT INTO BL_3NF.CE_PAYMENT_METHODS (
    "PAYMENT_METHOD_ID",
    "PAYMENT_METHOD_SRC_ID",
    "PAYMENT_METHOD_DESC",
    "IS_CONTACTLESS",
    "TA_INSERT_DT",
    "SOURCE_SYSTEM",
    "SOURCE_ENTITY")
SELECT 
    NEXTVAL('BL_3NF.CE_PAYMENT_METHODS_SEQ'),
    PM."PAYMENT_METHOD",
    PM."PAYMENT_METHOD",
    "IS_CONTACTLESS"::BOOLEAN,
    CURRENT_TIMESTAMP,
    "SOURCE_SYSTEM",
    "SOURCE_ENTITY"
FROM (
    SELECT DISTINCT 
        "PAYMENT_METHOD",
        "IS_CONTACTLESS",
        'SA_OFFLINE_SALES' AS "SOURCE_SYSTEM",
        'SRC_OFFLINE_COFFEE_SHOP_TRANSACTIONS' AS "SOURCE_ENTITY"      
    FROM SA_OFFLINE_SALES.SRC_OFFLINE_COFFEE_SHOP_TRANSACTIONS 
    UNION 
     SELECT DISTINCT 
        "PAYMENT_METHOD",
        "IS_CONTACTLESS",
        'SA_ONLINE_SALES' AS "SOURCE_SYSTEM",
        'SRC_ONLINE_COFFEE_SHOP_TRANSACTIONS' AS "SOURCE_ENTITY"   
    FROM SA_ONLINE_SALES.SRC_ONLINE_COFFEE_SHOP_TRANSACTIONS 
) PM
ON CONFLICT("PAYMENT_METHOD_SRC_ID","SOURCE_SYSTEM","SOURCE_ENTITY") DO NOTHING;
GET DIAGNOSTICS ROWS_INSERTED = ROW_COUNT;
      CALL BL_CL.LOG_ETL('LOAD_CE_PAYMENT_METHODS', ROWS_INSERTED, 'SUCCESS');
EXCEPTION  WHEN OTHERS THEN
       CALL BL_CL.LOG_ETL('LOAD_CE_PAYMENT_METHODS', 0, 'ERROR: ' || SQLERRM);
END;
$$;
