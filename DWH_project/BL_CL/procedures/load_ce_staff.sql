--CE_LOAD_STAFF
CREATE OR REPLACE PROCEDURE BL_CL.LOAD_CE_STAFF()
LANGUAGE PLPGSQL
AS $$
DECLARE ROWS_INSERTED INTEGER:=0;
BEGIN
	WITH ranked_staff AS ( SELECT distinct "STAFF_ID","STAFF_FIRST_NAME","STAFF_LAST_NAME","JOB_START_DT","EMPLOYMENT_STATUS","HOURLY_WAGE", ROW_NUMBER() OVER (PARTITION BY "STAFF_ID" ORDER BY "EVENT_DT" DESC) AS rn
    FROM SA_OFFLINE_SALES.SRC_OFFLINE_COFFEE_SHOP_TRANSACTIONS )
	INSERT INTO BL_3NF.CE_STAFF (
    "STAFF_ID",
    "STAFF_SRC_ID",
    "STAFF_FIRST_NAME",
    "STAFF_LAST_NAME",
    "JOB_START_DT",
    "EMPLOYMENT_STATUS",
    "HOURLY_WAGE",
    "TA_INSERT_DT",
    "SOURCE_SYSTEM",
    "SOURCE_ENTITY")
SELECT 
   nextval('BL_3NF.CE_STAFF_SEQ'),
    s."STAFF_ID",
    s."STAFF_FIRST_NAME",
    s."STAFF_LAST_NAME",
    TO_DATE(s."JOB_START_DT", 'MM/DD/YYYY'),
    s."EMPLOYMENT_STATUS",
    s."HOURLY_WAGE" :: DECIMAL(10,2),
    CURRENT_TIMESTAMP,
    'SA_OFFLINE_SALES',
    'SRC_OFFLINE_COFFEE_SHOP_TRANSACTIONS'
  FROM ranked_staff s
  WHERE rn = 1
ON CONFLICT ("STAFF_SRC_ID","SOURCE_SYSTEM","SOURCE_ENTITY") DO
update set 
"STAFF_FIRST_NAME"=excluded."STAFF_FIRST_NAME",
"STAFF_LAST_NAME"=excluded."STAFF_LAST_NAME",
"JOB_START_DT"=excluded."JOB_START_DT",
"EMPLOYMENT_STATUS"=excluded."EMPLOYMENT_STATUS",
"HOURLY_WAGE"=excluded."HOURLY_WAGE"

where( 
bl_3nf.ce_staff."STAFF_FIRST_NAME" is distinct from excluded."STAFF_FIRST_NAME" or
bl_3nf.ce_staff."STAFF_LAST_NAME" is distinct from excluded."STAFF_LAST_NAME" or
bl_3nf.ce_staff."JOB_START_DT" is distinct from excluded."JOB_START_DT" or
bl_3nf.ce_staff."EMPLOYMENT_STATUS" is distinct from excluded."EMPLOYMENT_STATUS" or
bl_3nf.ce_staff."HOURLY_WAGE" is distinct from excluded."HOURLY_WAGE");

GET DIAGNOSTICS ROWS_INSERTED = ROW_COUNT;
      CALL BL_CL.LOG_ETL('LOAD_CE_STAFF', ROWS_INSERTED, 'SUCCESS');
EXCEPTION  WHEN OTHERS THEN
       CALL BL_CL.LOG_ETL('LOAD_CE_STAFF', 0, 'ERROR: ' || SQLERRM);
END;
$$;
