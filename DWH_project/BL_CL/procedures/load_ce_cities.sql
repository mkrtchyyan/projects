CREATE OR REPLACE PROCEDURE BL_CL.LOAD_CE_CITIES()
LANGUAGE PLPGSQL
AS $$
DECLARE ROWS_INSERTED INTEGER := 0;
BEGIN 
	INSERT INTO BL_3NF.CE_CITIES (
    "CITY_ID",
    "CITY_SRC_ID",
    "COUNTRY_ID",
    "CITY_DESC",
    "TA_INSERT_DT",
    "SOURCE_SYSTEM",
    "SOURCE_ENTITY")
SELECT 
    NEXTVAL('BL_3NF.CE_CITIES_SEQ'),
    CI."CITY" || ' | ' || CI."COUNTRY" AS "CITY_SRC_ID",
    COALESCE(C."COUNTRY_ID", -1),
    CI."CITY",
    CURRENT_TIMESTAMP,
    CI."SOURCE_SYSTEM",
    CI."SOURCE_ENTITY"
FROM ( SELECT DISTINCT 
       "STORE_CITY" AS "CITY",
       "STORE_COUNTRY" AS "COUNTRY",
        'SA_ONLINE_SALES' AS "SOURCE_SYSTEM",
        'SRC_ONLINE_COFFEE_SHOP_TRANSACTIONS' AS "SOURCE_ENTITY"
    FROM SA_ONLINE_SALES.SRC_ONLINE_COFFEE_SHOP_TRANSACTIONS
    UNION ALL
    SELECT DISTINCT 
       "STORE_CITY" AS "CITY",
      "STORE_COUNTRY" AS "COUNTRY",
        'SA_OFFLINE_SALES' AS "SOURCE_SYSTEM",
        'SRC_OFFLINE_COFFEE_SHOP_TRANSACTIONS' AS "SOURCE_ENTITY"
    FROM SA_OFFLINE_SALES.SRC_OFFLINE_COFFEE_SHOP_TRANSACTIONS) CI
LEFT JOIN BL_3NF.CE_COUNTRIES C 
ON LOWER(C."COUNTRY_SRC_ID") = LOWER(CI."COUNTRY") AND C."SOURCE_SYSTEM"=CI."SOURCE_SYSTEM" AND C."SOURCE_ENTITY"=CI."SOURCE_ENTITY"
ON CONFLICT ("CITY_SRC_ID","SOURCE_SYSTEM","SOURCE_ENTITY") DO NOTHING;
GET DIAGNOSTICS ROWS_INSERTED = ROW_COUNT;
  CALL BL_CL.LOG_ETL('LOAD_CE_CITIES', ROWS_INSERTED, 'SUCCESS' );
EXCEPTION  WHEN OTHERS THEN
          CALL BL_CL.LOG_ETL('LOAD_CE_CITIES', 0, 'ERROR: ' || SQLERRM);
END;
$$;
