CREATE OR REPLACE PROCEDURE BL_CL.LOAD_CE_PAYMENT_PROVIDERS()
LANGUAGE PLPGSQL
AS $$
DECLARE ROWS_INSERTED INTEGER:=0;
BEGIN
	INSERT INTO BL_3NF.CE_PAYMENT_PROVIDERS (
    "PAYMENT_PROVIDER_ID",
    "PAYMENT_PROVIDER_SRC_ID",
    "PAYMENT_PROVIDER_DESC",
    "TA_INSERT_DT",
    "SOURCE_SYSTEM",
    "SOURCE_ENTITY")
SELECT 
   NEXTVAL('BL_3NF.CE_PAYMENT_PROVIDERS_SEQ'),
   COALESCE(PP."PAYMENT_PROVIDER",'N.A.') AS "PAYMENT_PROVIDER",
   COALESCE(PP."PAYMENT_PROVIDER",'N.A.') AS "PAYMENT_PROVIDER",
    CURRENT_TIMESTAMP,
    "SOURCE_SYSTEM",
    "SOURCE_ENTITY"

FROM (
    SELECT DISTINCT 
    "PAYMENT_PROVIDER",
    'SA_OFFLINE_SALES' AS "SOURCE_SYSTEM",
    'SRC_OFFLINE_COFFEE_SHOP_TRANSACTIONS' AS "SOURCE_ENTITY"
    FROM SA_OFFLINE_SALES.SRC_OFFLINE_COFFEE_SHOP_TRANSACTIONS
    UNION ALL 
    SELECT DISTINCT 
    "PAYMENT_PROVIDER",
    'SA_ONLINE_SALES' AS "SOURCE_SYSTEM",
    'SRC_ONLINE_COFFEE_SHOP_TRANSACTIONS' AS "SOURCE_ENTITY"
    FROM SA_ONLINE_SALES.SRC_ONLINE_COFFEE_SHOP_TRANSACTIONS
) PP
ON CONFLICT ("PAYMENT_PROVIDER_SRC_ID","SOURCE_SYSTEM","SOURCE_ENTITY") DO NOTHING;
GET DIAGNOSTICS ROWS_INSERTED = ROW_COUNT;
      CALL BL_CL.LOG_ETL('LOAD_CE_PAYMENT_PROVIDERS', ROWS_INSERTED, 'SUCCESS');
EXCEPTION  WHEN OTHERS THEN
       CALL BL_CL.LOG_ETL('LOAD_CE_PAYMENT_PROVIDERS', 0, 'ERROR: ' || SQLERRM);
END;
$$;
